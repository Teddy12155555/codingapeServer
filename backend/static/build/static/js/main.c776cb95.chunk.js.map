{"version":3,"sources":["serviceWorker.js","api.js","components/auth.js","components/homepage.js","components/forbidden.js","index.js"],"names":["Boolean","window","location","hostname","match","userRequest","axios","create","baseURL","Auth","state","email","password","errors","onChange","bind","onSubmit","e","this","setState","target","name","value","preventDefault","data","user","post","then","res","error","console","log","undefined","sessionStorage","setItem","alert","props","history","push","getItem","className","noValidate","type","placeholder","Component","Homepage","href","Forbidden","ReactDOM","render","exact","path","component","from","to","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iFCdAC,E,OAAcC,EAAMC,OAAO,CAAEC,QAHvB,0BC+EGC,E,kDA3Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVC,OAAQ,IAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBARJ,E,qDAWLE,GACPC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,+BAGnCL,GAAI,IAAD,OACVA,EAAEM,iBAEF,IDhByBC,ECgBnBC,EAAO,CACXd,MAAOO,KAAKR,MAAMC,MAClBC,SAAUM,KAAKR,MAAME,WDlBEY,ECsBZC,EDtBqBpB,EAAYqB,KAAK,cAAeF,ICsB/CG,MAAK,SAACC,GAClBA,EAAIC,QACPC,QAAQC,IAAI,mBACaC,GAArBJ,EAAIJ,KAAJ,QAGFS,eAAeC,QAAQ,YAAaN,EAAIJ,MACxCW,MAAM,WACN,EAAKC,MAAMC,QAAQC,KAAK,gB,+BAO9B,OAAIL,eAAeM,QAAQ,cACzBrB,KAAKkB,MAAMC,QAAQC,KAAK,SACjB,+BAGP,yBAAKE,UAAU,cACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,UACb,wDACA,0BAAMC,YAAU,EAACzB,SAAUE,KAAKF,UAC9B,2BACE0B,KAAK,QACLrB,KAAK,QACLsB,YAAY,QACZrB,MAAOJ,KAAKR,MAAMC,MAClBG,SAAUI,KAAKJ,WAEjB,2BACE4B,KAAK,WACLrB,KAAK,WACLsB,YAAY,WACZrB,MAAOJ,KAAKR,MAAME,SAClBE,SAAUI,KAAKJ,WAEjB,4BAAQ4B,KAAK,UAAb,iBAEF,2C,GApEOE,aCsDJC,G,6KAtDX,YAA2Cb,GAAvCC,eAAeM,QAAQ,aAEvB,yBAAKC,UAAU,aACb,4BACE,4BACE,uBAAGM,KAAK,KACN,0BAAMN,UAAU,SAAhB,YACA,+BACA,+BACA,+BACA,0BAAMA,UAAU,qBAGpB,4BACE,uBAAGM,KAAK,KACN,0BAAMN,UAAU,SAAhB,QACA,+BACA,+BACA,+BACA,0BAAMA,UAAU,kBAGpB,4BACE,uBAAGM,KAAK,KACN,0BAAMN,UAAU,UAChB,+BACA,+BACA,+BACA,0BAAMA,UAAU,kBAGpB,4BACE,uBAAGM,KAAK,KACN,0BAAMN,UAAU,UAChB,+BACA,+BACA,+BACA,0BAAMA,UAAU,qBAO1BtB,KAAKkB,MAAMC,QAAQC,KAAK,cAEtB,6BACE,6C,GAjDaM,cCcRG,G,6KAXX,OADAjB,QAAQC,IAAI,QAEV,yBAAKS,UAAU,aACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,MAAd,OACA,kGACA,sD,GARcI,cCaxBI,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWL,IAC1C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAAQC,UAAW3C,IACrC,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,QAAQC,UAAWP,IACrC,kBAAC,IAAD,CAAUK,OAAK,EAACG,KAAK,IAAIC,GAAG,YAGhCC,SAASC,eAAe,SL2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLC,QAAQD,MAAMA,EAAMkC,c","file":"static/js/main.c776cb95.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\nconst URL = \"http://localhost:5000\";\n\n// Define\nconst userRequest = axios.create({ baseURL: URL });\n\n// Apis\nexport const apiUserLogin = (data) => userRequest.post(\"/user/login\", data);\n","import React, { Component } from \"react\";\nimport \"../scss/auth.scss\";\nimport { apiUserLogin } from \"../api\";\n\nclass Auth extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\",\n      errors: {},\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const user = {\n      email: this.state.email,\n      password: this.state.password,\n    };\n\n    // Api Call\n    apiUserLogin(user).then((res) => {\n      if (!res.error) {\n        console.log(\"POST login\");\n        if (res.data[\"error\"] != undefined) {\n          // get some error\n        } else {\n          sessionStorage.setItem(\"UserToken\", res.data);\n          alert(\"Login !\");\n          this.props.history.push(\"/home\");\n        }\n      }\n    });\n  }\n\n  render() {\n    if (sessionStorage.getItem(\"UserToken\")) {\n      this.props.history.push(\"/home\");\n      return <div></div>;\n    }\n    return (\n      <div className=\"login-page\">\n        <div className=\"container\">\n          <div className=\"top\"></div>\n          <div className=\"bottom\"></div>\n          <div className=\"center\">\n            <h2>帳戶驗證</h2>\n            <form noValidate onSubmit={this.onSubmit}>\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"email\"\n                value={this.state.email}\n                onChange={this.onChange}\n              />\n              <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"password\"\n                value={this.state.password}\n                onChange={this.onChange}\n              />\n              <button type=\"submit\">登入</button>\n            </form>\n            <h2>&nbsp;</h2>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Auth;\n","import React, { Component } from \"react\";\nimport \"../scss/homepage.scss\";\nclass Homepage extends Component {\n  render() {\n    if (sessionStorage.getItem(\"UserToken\") != undefined) {\n      return (\n        <div className=\"home-page\">\n          <ul>\n            <li>\n              <a href=\"#\">\n                <span className=\"title\">Line Bot</span>\n                <span></span>\n                <span></span>\n                <span></span>\n                <span className=\"fa fa-comments\"></span>\n              </a>\n            </li>\n            <li>\n              <a href=\"#\">\n                <span className=\"title\">Zoho</span>\n                <span></span>\n                <span></span>\n                <span></span>\n                <span className=\"fa fa-cubes\"></span>\n              </a>\n            </li>\n            <li>\n              <a href=\"#\">\n                <span className=\"title\"></span>\n                <span></span>\n                <span></span>\n                <span></span>\n                <span className=\"fa fa-times\"></span>\n              </a>\n            </li>\n            <li>\n              <a href=\"#\">\n                <span className=\"title\"></span>\n                <span></span>\n                <span></span>\n                <span></span>\n                <span className=\"fa fa-times\"></span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      );\n    } else {\n      this.props.history.push(\"/forbidden\");\n      return (\n        <div>\n          <h1>No Auth</h1>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Homepage;\n","import React, { Component } from \"react\";\nimport \"../scss/forbidden.scss\";\nclass Forbidden extends Component {\n  render() {\n    console.log(\"!!!!\");\n    return (\n      <div className=\"forbidden\">\n        <div className=\"base io\">\n          <h1 className=\"io\">403</h1>\n          <h2>你沒有權限造訪此網址......</h2>\n          <h5>Access forbidden</h5>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Forbidden;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n// Components\nimport Auth from \"./components/auth\";\nimport Homepage from \"./components/homepage\";\nimport Forbidden from \"./components/forbidden\";\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/forbidden\" component={Forbidden} />\n      <Route exact path=\"/auth\" component={Auth} />\n      <Route exact path=\"/home\" component={Homepage} />\n      <Redirect exact from=\"/\" to=\"/auth\" />\n    </Switch>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}